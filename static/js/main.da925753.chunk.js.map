{"version":3,"sources":["gaussian.js","App.js","serviceWorker.js","index.js"],"names":["isPrime","require","Gaussian","this","x","y","args","length","Array","arr","Object","console","log","g","Math","sqrt","norm","hypot","c","abs","App","props","state","s_real","s_imag","scale","primeProps","radius","fillStyle","strokeColor","pathProps","strokeWidth","e","keyCode","setState","prevState","newScale","min","max","target","getBBox","mat","getScreenCTM","inverse","sx","round","clientX","a","sy","clientY","d","f","rmin","imin","rmax","imax","cx","cy","points","r","i","push","start_pt","curr_pt","curr_dir","add","multiply","equalTo","path_data","fill","stroke","stroke-width","w","h","xcount","ceil","ycount","prime_points","getPrimePoints","path","getPath","box","xmlns","width","height","viewBox","onKeyDown","keydown","bind","onClick","onclick","tabIndex","map","item","strokeStyle","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.da925753.chunk.js","sourcesContent":["const {isPrime} = require('mathjs');\n\nexport class Gaussian {\n    constructor(...args) {\n        this.x = 0;\n        this.y = 0;\n        if (args.length === 0) {\n            return;\n        }\n\n        if (args.length === 1 && args[0] instanceof Array && args[0].length === 2) {\n            let arr = args[0];\n            if (typeof (arr[0]) == \"number\" && typeof (arr[1]) == \"number\") {\n                this.x = arr[0];\n                this.y = arr[1];\n                return;\n            }\n        }\n\n        if (args.length === 1 && args[0] instanceof Object && 'x' in args[0]) {\n            this.x = args[0].x;\n            if ('y' in args[0]) {\n                this.y = args[0].y;\n            }\n            return;\n        }\n\n        if (args.length === 1 && typeof(args[0]) == \"number\") {\n            this.x = args[0];\n            this.y = 0;\n            return;\n        }\n\n        if (args.length === 2) {\n            if (typeof (args[0]) == \"number\" && typeof (args[1]) == \"number\") {\n                this.x = args[0];\n                this.y = args[1];\n                return;\n            }\n        }\n\n        //        throw Errors.ILLEGAL_PARAMETERS;\n        console.log('throw');\n        throw 666;\n    }\n\n    conjugate() {\n        return new Gaussian(this.x, -this.y);\n    }\n\n    equalTo(g) {\n        return (this.x == g.x) && (this.y == g.y);\n    }\n\n    add(g) {\n        return new Gaussian(this.x + g.x, this.y + g.y);\n    }\n\n    subtract(g) {\n        return new Gaussian(this.x - g.x, this.y - g.y);\n    }\n\n    multiply(g) {\n        return new Gaussian(this.x*g.x - this.y*g.y,\n                            this.x*g.y + this.y*g.x);\n    }\n\n    absoluteValue() {\n        return Math.sqrt(this.norm());\n    }\n\n    norm() {\n        return this.x*this.x + this.y*this.y;\n    }\n\n    isPrime() {\n        if (this.x * this.y !== 0) {\n            const hypot = this.x*this.x + this.y*this.y;\n            return isPrime(hypot);\n        } else {\n            const c = Math.abs(this.x + this.y);\n            return isPrime(c) && (c%4) == 3;\n        }\n    }\n\n}\n\nexport default Gaussian;\n","import React from 'react';\nimport './App.css';\nimport {Gaussian} from './gaussian.js';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            s_real: 7,\n            s_imag: -8,\n            scale: 12,\n        };\n\n        this.primeProps = {\n            radius: 5,\n            fillStyle: \"magenta\",\n            strokeColor: \"none\"\n        };\n\n        this.pathProps = {\n            fillStyle: \"none\",\n            strokeColor: \"grey\",\n            strokeWidth: \"3\"\n        };\n    }\n\n    keydown(e) {\n        switch (e.keyCode) {\n        case 187:\n            this.setState((prevState) => {\n                const newScale = Math.min(22, prevState.scale+1);\n                return {\n                    s_real: prevState.s_real,\n                    s_imag: prevState.s_imag,\n                    scale: newScale\n                }\n            });\n            break;\n        case 189:\n            this.setState((prevState) => {\n                const newScale = Math.max(4, prevState.scale-1);\n                return {\n                    s_real: prevState.s_real,\n                    s_imag: prevState.s_imag,\n                    scale: newScale\n                }\n            });\n            break;\n        }\n    }\n\n    onclick(e) {\n        const bbox = e.target.getBBox();\n        const mat = e.target.getScreenCTM().inverse();\n        const sx = Math.round((e.clientX * mat.a + mat.e) / this.state.scale);\n        const sy = -Math.round((e.clientY * mat.d + mat.f) / this.state.scale);\n        this.setState((prevState) => {\n            return {s_real: sx,\n                    s_imag: sy,\n                    scale: prevState.scale\n                   }\n        });\n    }\n\n    getPrimePoints(rmin, imin, rmax, imax, cx, cy, scale) {\n        let points = [];\n        for (let r=rmin; r<=rmax; r++) {\n            for (let i=imin; i<=imax; i++) {\n                if (new Gaussian(r,i).isPrime()) {\n                    const x = cx + scale*r;\n                    const y = cy - scale*i;\n                    points.push([x, y]);\n                }\n            }\n        }\n        return points;\n    }\n\n    getPath(cx, cy, scale) {\n        const start_pt = new Gaussian(this.state.s_real, this.state.s_imag);\n\n        let curr_pt = new Gaussian(start_pt);\n        let curr_dir = new Gaussian(1,0);\n        let points = [[cx + scale*curr_pt.x, cy - scale*curr_pt.y]];\n        do {\n            curr_pt = curr_pt.add(curr_dir);\n            const x = cx + scale*curr_pt.x;\n            const y = cy - scale*curr_pt.y;\n            points.push([x, y]);\n            if (curr_pt.isPrime()) {\n                curr_dir = curr_dir.multiply(new Gaussian(0,1));\n            }\n        } while(!curr_pt.equalTo(start_pt));\n\n\n        let path_data = '';\n        for (let i=0; i<points.length; i++) {\n            path_data += (i===0?' M':' L');\n            path_data += ' ' + points[i][0] + ' ' + points[i][1];\n        }\n\n        return <path fill={this.pathProps.fillStyle}\n                     stroke={this.pathProps.strokeColor}\n                     stroke-width={this.pathProps.strokeWidth}\n                     d={path_data} />\n    }\n\n    render() {\n        // convert a list of points into a collection of SVG circles\n        const dotfun = (items) => items.map((item) => {\n            const x = item[0];\n            const y = item[1];\n            const rad = 5;\n            return <circle cx={x} cy={y} r={this.primeProps.radius}\n                           fill={this.primeProps.fillStyle}\n                           stroke={this.primeProps.strokeStyle}\n                   />\n        })\n\n        const w = 1000;\n        const h = 960;\n        const xcount = Math.ceil((w/2) / this.state.scale);\n        const ycount = Math.ceil((h/2) / this.state.scale);\n        const rmin = -xcount;\n        const rmax = xcount;\n        const imin = -ycount;\n        const imax = ycount;\n        const prime_points = this.getPrimePoints(rmin, imin, rmax, imax, 0, 0, this.state.scale);\n        const path = this.getPath(0, 0, this.state.scale);\n        const box = [-w/2, -h/2, w, h];\n        return (\n            <>\n                <h2>Gaussian Primes</h2>\n                <svg xmlns=\"http://www.w3.org/2000/svg\"\n                     width={w/2}\n                     height={h/2}\n                     viewBox={box}\n                     onKeyDown={this.keydown.bind(this)}\n                     onClick={ this.onclick.bind(this)}\n                     tabIndex=\"1\"\n                >\n                <g fill=\"#FF00FF\">\n                    {path}\n                    <> {dotfun(prime_points)} </>\n                </g>\n            </svg>\n                <h3>Starting Point: {this.state.s_real} + {this.state.s_imag} <em>i</em></h3>\n            </>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}